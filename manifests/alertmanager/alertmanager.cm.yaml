apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-main
data:
  alertmanager.yaml: Z2xvYmFsOgogIHJlc29sdmVfdGltZW91dDogNW0KICBzbGFja19hcGlfdXJsOiAnaHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMveW91cl9zbGFja19hcGlfdG9rZW4nCiAgc210cF9zbWFydGhvc3Q6ICd5b3VyX3NtdHBfc21hcnRob3N0OjU4NycKICBzbXRwX2Zyb206ICd5b3VyX3NtdHBfZnJvbScKICBzbXRwX2F1dGhfdXNlcm5hbWU6ICd5b3VyX3NtdHBfdXNlcicKICBzbXRwX2F1dGhfcGFzc3dvcmQ6ICd5b3VyX3NtdHBfcGFzcycKdGVtcGxhdGVzOgotICcvZXRjL2FsZXJ0bWFuYWdlci90ZW1wbGF0ZS8qLnRtcGwnCnJvdXRlOgogIGdyb3VwX2J5OiBbJ2FsZXJ0bmFtZScsICdjbHVzdGVyJywgJ3NlcnZpY2UnXQogIGdyb3VwX3dhaXQ6IDMwcwogIGdyb3VwX2ludGVydmFsOiA1bQogIHJlcGVhdF9pbnRlcnZhbDogMWgKICByZWNlaXZlcjogZGVmYXVsdC1yZWNlaXZlcgogIHJvdXRlczoKICAtIG1hdGNoOgogICAgICBhbGVydG5hbWU6IERlYWRNYW5zU3dpdGNoCiAgICByZWNlaXZlcjogJ251bGwnCmluaGliaXRfcnVsZXM6Ci0gc291cmNlX21hdGNoOgogICAgc2V2ZXJpdHk6ICdjcml0aWNhbCcKICB0YXJnZXRfbWF0Y2g6CiAgICBzZXZlcml0eTogJ3dhcm5pbmcnCiAgIyBBcHBseSBpbmhpYml0aW9uIGlmIHRoZSBhbGVydG5hbWUgaXMgdGhlIHNhbWUuCiAgZXF1YWw6IFsnYWxlcnRuYW1lJywgJ2NsdXN0ZXInLCAnc2VydmljZSddCnJlY2VpdmVyczoKLSBuYW1lOiAnZGVmYXVsdC1yZWNlaXZlcicKICBzbGFja19jb25maWdzOgogIC0gY2hhbm5lbDogJyN5b3VyX3NsYWNrX2NoYW5uZWwnCiAgICB0ZXh0OiAne3sgLkFsZXJ0cy5GaXJpbmcgfX0ve3sgLkdyb3VwTGFiZWxzLmFsZXJ0bmFtZSB9fS97eyAuR3JvdXBMYWJlbHMuU29ydGVkUGFpcnMuVmFsdWVzIH19JwogICAgc2VuZF9yZXNvbHZlZDogdHJ1ZQogIGVtYWlsX2NvbmZpZ3M6CiAgLSB0bzogJ3lvdXJfYWxlcnRfZW1haWxfYWRkcmVzcycKICAgIHNlbmRfcmVzb2x2ZWQ6IHRydWUKLSBuYW1lOiAnbnVsbCcK
  default.tmpl: 
  email.html: 